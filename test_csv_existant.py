# test_csv_existant.py
"""Test du fichier CSV existant et du source matcher"""

import sys
import os
import json
import pandas as pd

# Ajouter le r√©pertoire tools au path
sys.path.append('tools')

def test_csv_content():
    """Teste le contenu du CSV existant"""
    print("=== TEST DU CSV EXISTANT ===\n")
    
    csv_path = "tools/ai900_content.csv"
    
    try:
        df = pd.read_csv(csv_path)
        print(f"‚úÖ CSV charg√© avec succ√®s")
        print(f"   - Nombre de lignes: {len(df)}")
        print(f"   - Colonnes: {list(df.columns)}")
        
        # V√©rifier les colonnes requises
        required_cols = ['module_name', 'unit_name', 'content']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"‚ùå Colonnes manquantes: {missing_cols}")
            print("   Colonnes disponibles:", list(df.columns))
        else:
            print("‚úÖ Toutes les colonnes requises sont pr√©sentes")
        
        # Afficher quelques exemples
        print(f"\nüìä Exemples de contenu:")
        for i in range(min(3, len(df))):
            row = df.iloc[i]
            print(f"   Ligne {i+1}:")
            print(f"     Module: {str(row.get('module_name', 'N/A'))[:50]}...")
            print(f"     Unit√©: {str(row.get('unit_name', 'N/A'))[:50]}...")
            print(f"     Contenu: {str(row.get('content', 'N/A'))[:80]}...")
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du CSV: {e}")
        return False

def test_source_matcher():
    """Test du matcher de sources avec le CSV existant"""
    print("=== TEST DU SOURCE MATCHER ===\n")
    
    try:
        from source_adder_tool import source_matcher
        
        # V√©rifier l'√©tat du matcher
        if source_matcher.content_df is None:
            print("‚ùå Le matcher n'a pas pu charger les donn√©es")
            print("   V√©rification du chemin CSV...")
            
            # Tenter diff√©rents chemins
            possible_paths = [
                "tools/ai900_content.csv",
                "ai900_content.csv",
                os.path.join(os.getcwd(), "tools", "ai900_content.csv")
            ]
            
            for path in possible_paths:
                if os.path.exists(path):
                    print(f"   ‚úÖ CSV trouv√© √†: {path}")
                else:
                    print(f"   ‚ùå CSV non trouv√© √†: {path}")
            
            return False
        
        print(f"‚úÖ Matcher initialis√© avec {len(source_matcher.content_df)} entr√©es")
        
        # Test avec des questions de diff√©rents domaines
        test_questions = [
            "Quel service Azure permet d'analyser des images et d√©tecter des objets ?",
            "Comment utiliser Azure Text Analytics pour analyser le sentiment ?", 
            "Quelle est la diff√©rence entre l'apprentissage supervis√© et non supervis√© ?",
            "Comment cr√©er un bot avec Azure Bot Service ?",
            "Quels sont les principes de l'IA responsable ?"
        ]
        
        print(f"\nüîç Test avec {len(test_questions)} questions:")
        
        for i, question in enumerate(test_questions):
            print(f"\n   Question {i+1}: {question[:60]}...")
            
            url, confidence = source_matcher.find_best_source(question)
            print(f"   URL trouv√©e: {url}")
            print(f"   Confiance: {confidence:.3f}")
            
            # Extraire les concepts cl√©s
            concepts = source_matcher.extract_key_concepts(question)
            print(f"   Concepts d√©tect√©s: {concepts}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du matcher: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_add_sources_tool():
    """Test de l'outil d'ajout de sources"""
    print("=== TEST DE L'OUTIL D'AJOUT DE SOURCES ===\n")
    
    try:
        from source_adder_tool import add_sources_to_quiz_tool
        
        # Quiz test sans sources
        test_quiz = [
            {
                "question": "Quel service Azure permet d'analyser des images ?",
                "options": [
                    "A. Azure Computer Vision",
                    "B. Azure Text Analytics", 
                    "C. Azure Speech Services",
                    "D. Azure Translator"
                ],
                "correct_answer": "A. Azure Computer Vision",
                "explanation": "Azure Computer Vision est sp√©cialis√© dans l'analyse d'images."
            },
            {
                "question": "Quelle technique d'apprentissage automatique utilise des donn√©es √©tiquet√©es ?",
                "options": [
                    "A. Apprentissage non supervis√©",
                    "B. Apprentissage supervis√©",
                    "C. Apprentissage par renforcement", 
                    "D. Apprentissage profond"
                ],
                "correct_answer": "B. Apprentissage supervis√©",
                "explanation": "L'apprentissage supervis√© utilise des donn√©es d'entra√Ænement √©tiquet√©es."
            }
        ]
        
        quiz_json = json.dumps(test_quiz, ensure_ascii=False)
        print(f"Quiz d'entr√©e (sans sources):")
        print(f"   {len(test_quiz)} questions")
        
        # Appliquer l'ajout de sources
        result = add_sources_to_quiz_tool(quiz_json)
        
        # Parser le r√©sultat
        try:
            updated_quiz = json.loads(result)
            print(f"\n‚úÖ Sources ajout√©es avec succ√®s!")
            print(f"   {len(updated_quiz)} questions trait√©es")
            
            for i, q in enumerate(updated_quiz):
                print(f"\n   Question {i+1}:")
                print(f"     URL: {q.get('source_url', 'N/A')}")
                print(f"     Confiance: {q.get('source_confidence', 'N/A')}")
            
            return True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur de parsing JSON: {e}")
            print(f"R√©sultat brut: {result[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de l'outil: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration_flow():
    """Test du flux d'int√©gration complet"""
    print("=== TEST DU FLUX D'INT√âGRATION ===\n")
    
    # Simuler ce que fait l'agent actuellement
    print("Simulation du comportement actuel de l'agent:")
    print("1. G√©n√©ration de quiz avec generate_ai900_quiz")
    print("2. Les questions ont d√©j√† des source_url")
    print("3. add_sources_to_quiz_tool n'est pas appel√©")
    
    print("\nüí° Solution recommand√©e:")
    print("1. Modifier quiz_generator_tool pour g√©n√©rer SANS sources")  
    print("2. Puis appeler add_sources_to_quiz_tool automatiquement")
    print("3. Ou cr√©er un nouvel outil generate_complete_ai900_quiz")

if __name__ == "__main__":
    print("üîç TEST COMPLET DU SYST√àME AVEC CSV EXISTANT\n")
    
    # 1. Tester le CSV
    csv_ok = test_csv_content()
    
    if csv_ok:
        # 2. Tester le matcher
        matcher_ok = test_source_matcher()
        
        if matcher_ok:
            # 3. Tester l'outil d'ajout
            tool_ok = test_add_sources_tool()
            
            # 4. Analyser l'int√©gration
            test_integration_flow()
        else:
            print("‚ùå Impossible de continuer sans matcher fonctionnel")
    else:
        print("‚ùå Impossible de continuer sans CSV valide")
    
    print("\nüéØ TEST TERMIN√â")